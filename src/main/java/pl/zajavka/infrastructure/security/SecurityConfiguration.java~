package pl.zajavka.infrastructure.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authManager(
            AuthenticationConfiguration authConfig
    ) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    // ❌ Całkowicie wyłączone Security (wystarczy aktywować ten Bean)
    @Bean
    SecurityFilterChain securityDisabled(HttpSecurity http) throws Exception {
        http.csrf().disable() // CSRF wyłączone (tylko na własne ryzyko)
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll() // Brak autoryzacji — wszystko dostępne publicznie
                );

        return http.build();
    }

    // 🔐 Pełna konfiguracja Spring Security (odkomentuj, aby aktywować)
    // @Bean
    // SecurityFilterChain securityEnabled(HttpSecurity http) throws Exception {
    //     http.csrf().disable()
    //         .authorizeHttpRequests(auth -> auth
    //             .requestMatchers("/login", "/error", "/images/oh_no.png").permitAll()
    //             .requestMatchers("/mechanic/**").hasAuthority("MECHANIC")
    //             .requestMatchers("/salesman/**", "/purchase/**", "/service/**").hasAuthority("SALESMAN")
    //             .requestMatchers("/", "/car/**", "/images/**").hasAnyAuthority("MECHANIC", "SALESMAN")
    //             .requestMatchers("/api/**").hasAuthority("REST_API")
    //             .anyRequest().authenticated()
    //         )
    //         .formLogin().permitAll()
    //         .and()
    //         .logout().logoutSuccessUrl("/login").permitAll();

    //     return http.build();
    // }
}
